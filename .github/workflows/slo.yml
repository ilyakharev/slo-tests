name: Full SLO test workflow

on:
  workflow_call:
    inputs:
      language_id:
        description: "SDK language or language+variant for kuberetes, prometheus metrics, PR comments"
        required: true
        type: string
      language:
        description: "SDK name for PR comments"
        default: ""
        type: string
      workload_path:
        description: "Workload folder to build docker image from"
        required: true
        type: string
      workload_build_context:
        description: "Path to docker build context - cwd is workload_path"
        default: "."
        type: string
      workload_build_options:
        description: "String with additional options, such as --build-arg and others from https://docs.docker.com/engine/reference/commandline/build/#options"
        default: ""
        type: string
    secrets:
      SLO_KUBE_CONFIG:
        required: true
      SLO_DOCKER_REPO:
        required: true
      SLO_DOCKER_FOLDER:
        required: true
      SLO_DOCKER_USERNAME:
        required: true
      SLO_DOCKER_PASSWORD:
        required: true
      SLO_AWS_CREDENTIALS:
        required: true
      SLO_AWS_CONFIG:
        required: true
      SLO_S3_ENDPOINT:
        required: true

concurrency: slo

jobs:
  obtain-mutex:
    runs-on: ubuntu-latest
    steps:
      - name: obtain-mutex
        uses: ydb-platform/slo-tests/.github/actions/mutex@main
        with:
          KUBE_CONFIG: ${{ secrets.SLO_KUBE_CONFIG }}
          command: obtain
          language_id: "${{ inputs.language_id }}"

  create-cluster:
    needs: [obtain-mutex]
    runs-on: ubuntu-latest
    steps:
      - name: create-cluster
        uses: ydb-platform/slo-tests/.github/actions/cluster@main
        with:
          subfolder: cluster_create_action
          KUBE_CONFIG: ${{ secrets.SLO_KUBE_CONFIG }}
          command: apply

  build-workload:
    needs: [obtain-mutex]
    uses: ./.github/workflows/build-workload.yml
    secrets:
      DOCKER_REPO: ${{ secrets.SLO_DOCKER_REPO }}
      DOCKER_FOLDER: ${{ secrets.SLO_DOCKER_FOLDER }}
      DOCKER_USERNAME: ${{ secrets.SLO_DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.SLO_DOCKER_PASSWORD }}
    with:
      language_id: ${{ inputs.language_id }}
      workload_path: ${{ inputs.workload_path }}
      context: ${{ inputs.workload_build_context }}
      options: ${{ inputs.workload_build_options }}

  create-tables:
    needs: [create-cluster, build-workload]
    runs-on: ubuntu-latest
    steps:
      - run: mkdir $HOME/.kube; echo "${{ secrets.SLO_KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

      - name: Initialize tables using workload image
        uses: ydb-platform/slo-tests/.github/actions/workload@main
        with:
          language_id: "${{ inputs.language_id }}"
          command: "create"
          timeout: "40s"
          DOCKER_REPO: "${{ secrets.SLO_DOCKER_REPO }}"
          DOCKER_FOLDER: "${{ secrets.SLO_DOCKER_FOLDER }}"
          additionalArgs: >
            --min-partitions-count 6
            --max-partitions-count 1000
            --partition-size 1
            --initial-data-count 1000

  run-workload:
    needs: [create-cluster, create-tables, build-workload]
    uses: ./.github/workflows/run-slo.yml
    secrets:
      KUBE_CONFIG: ${{ secrets.SLO_KUBE_CONFIG }}
      DOCKER_REPO: "${{ secrets.SLO_DOCKER_REPO }}"
      DOCKER_FOLDER: "${{ secrets.SLO_DOCKER_FOLDER }}"
    with:
      language_id: ${{ inputs.language_id }}

  check-results:
    needs: [run-workload]
    uses: ./.github/workflows/check-prometheus.yml
    secrets:
      KUBE_CONFIG: ${{ secrets.SLO_KUBE_CONFIG }}
    with:
      test_start: ${{ needs.run-workload.outputs.test_start }}
      test_end: ${{ needs.run-workload.outputs.test_end }}
      test_start_iso: ${{ needs.run-workload.outputs.test_start_iso }}
      test_end_iso: ${{ needs.run-workload.outputs.test_end_iso }}
      language_id: ${{ inputs.language_id }}

  grafana-screenshot:
    needs: [run-workload]
    if: always() && needs.create-cluster.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - run: mkdir $HOME/.kube; echo "${{ secrets.SLO_KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

      - name: Create screenshot
        uses: ydb-platform/slo-tests/.github/actions/grafana-screenshot@main
        id: screenshot
        with:
          time_from: ${{ needs.run-workload.outputs.test_start }}
          time_to: ${{ needs.run-workload.outputs.test_end }}
          AWS_CREDENTIALS: ${{ secrets.SLO_AWS_CREDENTIALS }}
          AWS_CONFIG: ${{ secrets.SLO_AWS_CONFIG }}
          s3-endpoint: ${{ secrets.SLO_S3_ENDPOINT }}
          image-folder: "${{ vars.SLO_S3_IMAGES_FOLDER }}"
          image-prefix: "${{ inputs.language_id }}"

      - name: Log image URL
        run: echo "${{ steps.screenshot.outputs.picture-url}}"

      - name: Add comment to PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          comment_tag: slo-image-${{ inputs.language_id }}
          message: |
            :volcano: Here are results of SLO test for **${{ inputs.language }}**:

            [Grafana Dashboard](${{ vars.SLO_GRAFANA_DOMAIN }}/d/${{ vars.SLO_GRAFANA_DASHBOARD }}?orgId=1&from=${{ needs.run-workload.outputs.test_start }}&to=${{ needs.run-workload.outputs.test_end }})

            ![SLO-${{ inputs.language_id }}](${{ steps.screenshot.outputs.picture-url}})

  delete-cluster:
    needs: [run-workload, create-cluster]
    if: always() && needs.create-cluster.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: delete-cluster
        uses: ydb-platform/slo-tests/.github/actions/cluster@main
        with:
          subfolder: cluster_delete_action
          KUBE_CONFIG: ${{ secrets.SLO_KUBE_CONFIG }}
          command: delete

  release-mutex:
    needs: [delete-cluster, obtain-mutex]
    if: always() && needs.obtain-mutex.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: release-mutex
        uses: ydb-platform/slo-tests/.github/actions/mutex@main
        with:
          KUBE_CONFIG: ${{ secrets.SLO_KUBE_CONFIG }}
          command: release
          language_id: "${{ inputs.language_id }}"
