name: Workload and errors sheduler concurrent workflow

on:
  workflow_call:
    inputs:
      language:
        description: "SDK language or language+variant"
        required: true
        type: string
      time_between_phases:
        description: "Time to wait between phases (sleep command)"
        default: "20s"
        type: string
    secrets:
      KUBE_CONFIG:
        required: true
    outputs:
      test_start:
        description: "Test start timestamp"
        value: ${{ jobs.run-workload.outputs.start_time }}
      test_end:
        description: "Test end timestamp"
        value: ${{ jobs.run-workload.outputs.end_time }}

concurrency:
  group: ${{ github.ref }}-${{ inputs.language }}-test

jobs:
  run-workload:
    runs-on: ubuntu-latest
    outputs:
      start_time: ${{ steps.start.outputs.time }}
      end_time: ${{ steps.end.outputs.time }}
    steps:
      - name: Save start time
        id: start
        run: echo "time=`node -e 'console.log(new Date().valueOf())'`" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3
        # need this owing to local action usage

      - run: mkdir $HOME/.kube; echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

      - name: Run workload
        uses: ./.github/actions/workload
        with:
          language: "nodejs"
          command: "run"
          timeout: "5m"
          additionalArgs: >
            --time 160
            --shutdown-time 20
            --read-rps 1000
            --write-rps 100
            --prom-pgw http://prometheus-prometheus-pushgateway:9091

      - name: Save end time
        id: end
        run: echo "time=`node -e 'console.log(new Date().valueOf())'`" >> $GITHUB_OUTPUT

  # ~ 6 * (20s+3s) =Â± 140s
  run-errors-sheduler:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        # need this owing to local action usage

      - run: mkdir $HOME/.kube; echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

      - name: Get existing pods
        run: kubectl get pods

      - run: sleep ${{ inputs.time_between_phases }}

      - name: Get DB host's internal IP
        run: |
          export MARTYR_IP=`kubectl get pods database-sample-0 -o=jsonpath='{.status.podIP}'`
          echo "MARTYR_IP=$MARTYR_IP" >> $GITHUB_ENV

      - name: Show DB host's internal IP and grafana pod name
        run: echo ${MARTYR_IP} ${GRAFANA_POD}

      - name: Annotate freeze in grafana
        uses: ./.github/actions/grafana-annotate
        with:
          text: "Freeze tablet"
          tags: '["freeze", "tablet"]'

      - name: Freeze tablet
        run: >
          kubectl run -it --image=busybox --rm tablet-freezer --restart=Never -- sh -c "wget -q -O-
          '${MARTYR_IP}:8765/tablets/app?TabletID=72057594037968897&node=1&page=SetFreeze&freeze=1'"

      - run: sleep ${{ inputs.time_between_phases }}

      - name: Annotate unfreeze in grafana
        uses: ./.github/actions/grafana-annotate
        with:
          text: "Unfreeze tablet"
          tags: '["unfreeze", "tablet"]'

      - name: Unfreeze tablet
        run: >
          kubectl run -it --image=busybox --rm tablet-freezer --restart=Never -- sh -c "wget -q -O-
          '${MARTYR_IP}:8765/tablets/app?TabletID=72057594037968897&node=1&page=SetFreeze&freeze=0'"

      - run: sleep ${{ inputs.time_between_phases }}

      - name: Annotate deletion of the database pod in grafana
        uses: ./.github/actions/grafana-annotate
        with:
          text: "Delete database pod"
          tags: '["kube", "pod", "kubectl-delete"]'

      - name: Delete database pod (it will automatically restart)
        run: kubectl delete pod database-sample-1

      - run: sleep ${{ inputs.time_between_phases }}

      - name: Annotate hard shutdown of the database pod in grafana
        uses: ./.github/actions/grafana-annotate
        with:
          text: "Hard shutdown database pod"
          tags: '["kube", "pod", "kubectl-delete-force"]'

      - name: Hard shutdown database pod (it will automatically restart)
        run: kubectl delete pod database-sample-1 --force=true --grace-period=0

      - run: sleep ${{ inputs.time_between_phases }}

      - name: Annotate kill of the database pod from inside in grafana
        uses: ./.github/actions/grafana-annotate
        with:
          text: "Kill pod from inside"
          tags: '["kube", "pod", "kubectl-kill"]'

      - name: Kill pod from inside
        run: kubectl exec -it database-sample-0 -- /bin/bash -c "kill -2 1 && echo 'process killed'";

      - run: sleep ${{ inputs.time_between_phases }}
