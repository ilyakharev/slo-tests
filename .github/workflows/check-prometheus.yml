name: Check prometheus metrics workflow

on:
  workflow_call:
    inputs:
      test_start:
        description: "Test start timestamp"
        required: true
        type: string
      test_end:
        description: "Test end timestamp"
        required: true
        type: string
      test_start_iso:
        description: "Test start in ISO format"
        required: true
        type: string
      test_end_iso:
        description: "Test end  in ISO format"
        required: true
        type: string
      subfolder:
        required: false
        default: "check-prometheus"
        type: string
    secrets:
      KUBE_CONFIG:
        required: true

jobs:
  get-metrics:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read
    outputs:
      checks_matrix: ${{ steps.checker.outputs.checks_matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: "ydb-platform/slo-tests"
          path: "${{ inputs.subfolder }}"

      - run: mkdir $HOME/.kube; echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

      - run: 'echo "start: ${{ inputs.test_start }}; end:${{ inputs.test_end }}"'

        # queries in grafana:
        # max_99_latency: max_over_time(latency{quantile="0.99"}[$__range])
        # success_rate: max_over_time(not_oks[$__range])/(0.0001+max_over_time(not_oks[$__range])+max_over_time(oks[$__range]))
        # fail_interval: sum_over_time(clamp(irate(not_oks[2s])*2, 0, 1)[$__range:1s])
      - name: Get query result from grafana
        shell: bash
        run: >
          kubectl run -q -i --image=busybox --rm grafana-result-peeker --restart=Never -- sh -c '
          wget -q -O- --header='\''content-type: application/json'\'' 
          --post-data='\''{
            "queries": [
              {
                "refId": "success_rate",
                "datasource": {
                  "type": "prometheus",
                  "uid": "prometheus"
                },
                "editorMode": "code",
                "expr": "max_over_time(oks[$__range])/(0.0001+max_over_time(not_oks[$__range])+max_over_time(oks[$__range]))>0",
                "legendFormat": "__auto",
                "range": false,
                "instant": true,
                "interval": "1s",
                "key": "Q-23633ba7-91cd-4dae-bda9-0534c737bacf-0",
                "exemplar": false,
                "hide": false,
                "queryType": "timeSeriesQuery",
                "requestId": "Q-23633ba7-91cd-4dae-bda9-0534c737bacf-0Q-5b00819a-64cf-4684-8067-4caef59d2641-1Q-1e3c314b-70a4-44a4-8927-0be5c932483f-3success_rate",
                "utcOffsetSec": 14400,
                "datasourceId": 1,
                "intervalMs": 5000,
                "maxDataPoints": 1514
              },
              {
                "refId": "max_99_latency",
                "key": "Q-5b00819a-64cf-4684-8067-4caef59d2641-1",
                "datasource": {
                  "type": "prometheus",
                  "uid": "prometheus"
                },
                "editorMode": "code",
                "expr": "max_over_time(latency{quantile=\"0.99\"}[$__range])>0",
                "legendFormat": "__auto",
                "range": false,
                "instant": true,
                "exemplar": false,
                "hide": false,
                "queryType": "timeSeriesQuery",
                "requestId": "Q-23633ba7-91cd-4dae-bda9-0534c737bacf-0Q-5b00819a-64cf-4684-8067-4caef59d2641-1Q-1e3c314b-70a4-44a4-8927-0be5c932483f-3max_99_latency",
                "utcOffsetSec": 14400,
                "interval": "",
                "datasourceId": 1,
                "intervalMs": 5000,
                "maxDataPoints": 1514
              },
              {
                "refId": "fail_interval",
                "key": "Q-1e3c314b-70a4-44a4-8927-0be5c932483f-3",
                "datasource": {
                  "type": "prometheus",
                  "uid": "prometheus"
                },
                "editorMode": "code",
                "expr": "sum_over_time(clamp(irate(not_oks[2s])*2, 0, 1)[$__range:1s])>0",
                "legendFormat": "__auto",
                "range": false,
                "instant": true,
                "interval": "1s",
                "hide": false,
                "exemplar": false,
                "format": "time_series",
                "queryType": "timeSeriesQuery",
                "requestId": "Q-23633ba7-91cd-4dae-bda9-0534c737bacf-0Q-5b00819a-64cf-4684-8067-4caef59d2641-1Q-1e3c314b-70a4-44a4-8927-0be5c932483f-3fail_interval",
                "utcOffsetSec": 14400,
                "datasourceId": 1,
                "intervalMs": 5000,
                "maxDataPoints": 1514
              }
            ],
            "range": {
              "from": "${{ inputs.test_start_iso }}",
              "to": "${{ inputs.test_end_iso }}",
              "raw": {
                "from": "${{ inputs.test_start_iso }}",
                "to": "${{ inputs.test_end_iso }}"
              }
            },
            "from": "${{ inputs.test_start }}",
            "to": "${{ inputs.test_end }}"
          }'\''
          '\''http://grafana/api/ds/query'\''
          | base64' > query_result.b64;

      - name: Print result
        shell: bash
        run: cat query_result.b64

      - name: Create json from base64
        shell: bash
        run: cat query_result.b64 | base64 --decode > query_result.json

      - name: Run grafana output parser
        shell: bash
        run: node ${{ inputs.subfolder }}/scripts/parseGrafanaOutput.js query_result.json ./parsed.json

      - name: Check out parsed.json
        shell: bash
        run: cat ./parsed.json

      - name: Run grafana output checker
        id: checker
        shell: bash
        run: node ${{ inputs.subfolder }}/scripts/checkGrafanaValues.js parsed.json ${{ inputs.subfolder }}/scripts/objectives.json

      - name: Check out checks_results
        shell: bash
        run: ls checks_results

      - name: Check out checks_matrix
        shell: bash
        run: echo "${{ steps.checker.outputs.checks_matrix }}"

      - uses: actions/upload-artifact@v3
        with:
          name: checks_results
          path: checks_results/

  set-checks-status:
    runs-on: ubuntu-latest
    needs: [get-metrics]

    strategy:
      matrix:
        value: ${{ fromJson(needs.get-metrics.outputs.checks_matrix) }}

    permissions:
      checks: write
      pull-requests: read
      # contents: read

    steps:
      - name: load artifacts
        uses: actions/download-artifact@v3
        with:
          name: checks_results
          path: checks_results/

      - run: |
          cat checks_results/${{ matrix.value }}_output;
          echo "check_name=`cat checks_results/${{ matrix.value }}_name`" >> $GITHUB_OUTPUT
          echo "check_output=`cat checks_results/${{ matrix.value }}_output`" >> $GITHUB_OUTPUT
          echo "check_conclusion=`cat checks_results/${{ matrix.value }}_conclusion`" >> $GITHUB_OUTPUT
        id: get_result

      - run: echo '${{ steps.get_result.outputs.check_output }}'
      - run: echo '${{ steps.get_result.outputs.check_name }}'
      - run: echo '${{ steps.get_result.outputs.check_conclusion }}'

      - uses: LouisBrunner/checks-action@v1.5.0
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ steps.get_result.outputs.check_name }}
          conclusion: ${{ steps.get_result.outputs.check_conclusion }}
          output: ${{ steps.get_result.outputs.check_output }}
